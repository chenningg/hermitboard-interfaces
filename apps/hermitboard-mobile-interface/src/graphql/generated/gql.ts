/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query getAccountQuery($id: ID!) {\n    accounts(where: { id: $id }) {\n      edges {\n        node {\n          id\n          email\n          emailConfirmed\n          passwordUpdatedAt\n          authType {\n            id\n            value\n            description\n          }\n          authRoles {\n            edges {\n              node {\n                id\n                value\n                description\n              }\n            }\n          }\n          friends {\n            edges {\n              node {\n                id\n                nickname\n              }\n            }\n          }\n          portfolios {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          connections {\n            edges {\n              node {\n                name\n                accessToken\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetAccountQueryDocument,
    "\n  mutation loginToAccountMutation($username: String!, $password: String!) {\n    loginToAccount(input: { username: $username, password: $password }) {\n      account {\n        id\n        email\n        emailConfirmed\n        passwordUpdatedAt\n        authType {\n          id\n          value\n        }\n      }\n      session {\n        token\n        userID\n        authRoles\n      }\n    }\n  }\n": types.LoginToAccountMutationDocument,
};

export function graphql(source: "\n  query getAccountQuery($id: ID!) {\n    accounts(where: { id: $id }) {\n      edges {\n        node {\n          id\n          email\n          emailConfirmed\n          passwordUpdatedAt\n          authType {\n            id\n            value\n            description\n          }\n          authRoles {\n            edges {\n              node {\n                id\n                value\n                description\n              }\n            }\n          }\n          friends {\n            edges {\n              node {\n                id\n                nickname\n              }\n            }\n          }\n          portfolios {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          connections {\n            edges {\n              node {\n                name\n                accessToken\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAccountQuery($id: ID!) {\n    accounts(where: { id: $id }) {\n      edges {\n        node {\n          id\n          email\n          emailConfirmed\n          passwordUpdatedAt\n          authType {\n            id\n            value\n            description\n          }\n          authRoles {\n            edges {\n              node {\n                id\n                value\n                description\n              }\n            }\n          }\n          friends {\n            edges {\n              node {\n                id\n                nickname\n              }\n            }\n          }\n          portfolios {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          connections {\n            edges {\n              node {\n                name\n                accessToken\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation loginToAccountMutation($username: String!, $password: String!) {\n    loginToAccount(input: { username: $username, password: $password }) {\n      account {\n        id\n        email\n        emailConfirmed\n        passwordUpdatedAt\n        authType {\n          id\n          value\n        }\n      }\n      session {\n        token\n        userID\n        authRoles\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation loginToAccountMutation($username: String!, $password: String!) {\n    loginToAccount(input: { username: $username, password: $password }) {\n      account {\n        id\n        email\n        emailConfirmed\n        passwordUpdatedAt\n        authType {\n          id\n          value\n        }\n      }\n      session {\n        token\n        userID\n        authRoles\n      }\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;